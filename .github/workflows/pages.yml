name: Build and Deploy Blender Extensions (organized by ID/version)

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Init and update submodules (pull latest from remote)
        run: |
          git submodule init
          git submodule update --remote --recursive

      - name: Set up Blender Portable (Linux 4.4)
        run: |
          mkdir blender
          curl -L https://mirror.freedif.org/blender/release/Blender4.4/blender-4.4.1-linux-x64.tar.xz | tar xJ -C blender --strip-components=1

      - name: Create public directory
        run: mkdir public

      - name: Build each extension with Blender (extension build)
        run: |
          mkdir -p build_temp
          for dir in extensions/*; do
            if [ -d "$dir" ]; then
              ./blender/blender --background --command extension build --source-dir "$dir" --output-dir ./build_temp
            fi
          done

      - name: Organize built artifacts by ID and Version
        run: |
          mkdir -p public/extensions
          for zip in build_temp/*.zip; do
            filename=$(basename "$zip")
            name_version="${filename%.zip}"  # Remove Extension
            id=$(echo "$name_version" | sed 's/-[0-9]\+\.[0-9]\+\.[0-9]\+$//')
            version=$(echo "$name_version" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
      
            mkdir -p "public/extensions/$id/$version"
            mkdir -p "public/extensions/$id/latest"
      
            # zip配置
            cp "$zip" "public/extensions/$id/$version/${id}-${version}.zip"
            cp "$zip" "public/extensions/$id/latest/${id}-latest.zip"
      
            # 署名ファイル
            sha256sum "public/extensions/$id/$version/${id}-${version}.zip" | awk '{print $1}' > "public/extensions/$id/$version/${id}-${version}.zip.sig"
            sha256sum "public/extensions/$id/latest/${id}-latest.zip" | awk '{print $1}' > "public/extensions/$id/latest/${id}-latest.zip.sig"
          done

      - name: Generate index.html
        run: |
          echo '<html><body><h1>Blender Extensions Repository</h1><ul>' > public/index.html
          for ext in public/extensions/*; do
            if [ -d "$ext" ]; then
              extname=$(basename "$ext")
              echo "<li><a href=\"/extensions/$extname/latest/\">$extname (latest)</a></li>" >> public/index.html
            fi
          done
          echo '</ul></body></html>' >> public/index.html
          
      - name: Generate extensions.json from blender_manifest.toml
        run: |
          mkdir -p public
          echo '{ "extensions": [' > public/extensions.json
          first=1
          for dir in extensions/*; do
            if [ -d "$dir" ]; then
              manifest="$dir/blender_manifest.toml"
              if [ -f "$manifest" ]; then
                id=$(grep '^id =' "$manifest" | sed 's/id = "\(.*\)"/\1/')
                version=$(grep '^version =' "$manifest" | sed 's/version = "\(.*\)"/\1/')
                name=$(grep '^name =' "$manifest" | sed 's/name = "\(.*\)"/\1/')
                tagline=$(grep '^tagline =' "$manifest" | sed 's/tagline = "\(.*\)"/\1/')
                blender_version_min=$(grep '^blender_version_min =' "$manifest" | sed 's/blender_version_min = "\(.*\)"/\1/')
                license=$(grep '^license =' "$manifest" | sed 's/license = \["\(.*\)"\]/\1/')
      
                if [ "$first" -eq 0 ]; then
                  echo ',' >> public/extensions.json
                fi
                first=0
      
                echo '  {' >> public/extensions.json
                echo "    \"id\": \"$id\"," >> public/extensions.json
                echo "    \"version\": \"$version\"," >> public/extensions.json
                echo "    \"type\": \"add-on\"," >> public/extensions.json
                echo "    \"name\": \"$name\"," >> public/extensions.json
                echo "    \"tagline\": \"$tagline\"," >> public/extensions.json
                echo "    \"blender_version_min\": \"$blender_version_min\"," >> public/extensions.json
                echo "    \"license\": [\"$license\"]," >> public/extensions.json
                echo "    \"download_url\": \"https://blender.ray34g.com/extensions/$id/latest/${id}-latest.zip\"," >> public/extensions.json
                echo "    \"repository\": \"/extensions.json\"" >> public/extensions.json
                echo '  }' >> public/extensions.json
              fi
            fi
          done
          echo ']}' >> public/extensions.json
        
      - name: Generate CNAME file
        run: echo "blender.ray34g.com" > public/CNAME

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4